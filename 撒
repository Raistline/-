
#注意！此文件要将代码复制至jupyter notebook中运行
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import mglearn

#调取波士顿房价数据集
from mglearn.datasets import load_extended_boston
X,y = mglearn.datasets.load_extended_boston()

#建立测试集和训练集
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y,random_state=0)
print("X_train shape: {}".format(X_train.shape))
print("X_test shape: {}".format(X_test.shape))
print("y_train shape: {}".format(y_train.shape))
print("y_test shape: {}".format(y_test.shape))

#普通最小二乘法
from sklearn.linear_model import LinearRegression
lr = LinearRegression().fit(X_train, y_train)
print("Training set score:{:.2f}".format(lr.score(X_train, y_train)))
print("Test set score:{:.2f}".format(lr.score(X_test, y_test)))

#岭回归算法
from sklearn.linear_model import Ridge
ridge = Ridge().fit(X_train, y_train)
print("Training set score:{:.2f}".format(ridge.score(X_train, y_train)))
print("Test set score:{:.2f}".format(ridge.score(X_test, y_test)))

ridge10 = Ridge(alpha=10).fit(X_train, y_train)
print("Training set score:{:.2f}".format(ridge10.score(X_train, y_train)))
print("Test set score:{:.2f}".format(ridge10.score(X_test, y_test)))

ridge01 = Ridge(alpha=0.1).fit(X_train, y_train)
print("Training set score:{:.2f}".format(ridge01.score(X_train, y_train)))
print("Test set score:{:.2f}".format(ridge01.score(X_test, y_test)))

#画出关于每个特征斜率的点阵图
#plt.plot(ridge.coef_,'s',label="Ridge alpha=1")
#plt.plot(ridge10.coef_,'^',label="Ridge alpha=10")
#plt.plot(ridge01.coef_,'v',label="Ridge alpha=0.1")
#plt.plot(lr.coef_,'o', label="LinearRegression")
#plt.xlabel("Coefficient index")
#plt.ylabel("Coefficient magnitude")
#plt.hlines(0, 0, len(lr.coef_))
#plt.ylim(-25,25)
#plt.legend()

#Lasso回归
from sklearn.linear_model import Lasso
lasso = Lasso().fit(X_train,y_train)
print("Training set score:{:.2f}".format(lasso.score(X_train,y_train)))
print("Test set score:{:.2f}".format(lasso.score(X_test,y_test)))
print("Number of features used:{}".format(np.sum(lasso.coef_ != 0)))

lasso001 = Lasso(alpha=0.01, max_iter=100000).fit(X_train,y_train)
print("Training set score:{:.2f}".format(lasso001.score(X_train,y_train)))
print("Test set score:{:.2f}".format(lasso001.score(X_test,y_test)))
print("Number of features used:{}".format(np.sum(lasso001.coef_ != 0)))

lasso00001 = Lasso(alpha=0.0001, max_iter=100000).fit(X_train,y_train)
print("Training set score:{:.2f}".format(lasso00001.score(X_train,y_train)))
print("Test set score:{:.2f}".format(lasso00001.score(X_test,y_test)))
print("Number of features used:{}".format(np.sum(lasso00001.coef_ != 0)))
#Lasso回归图形绘制
plt.plot(lasso.coef_,'s',label="lasso alpha=1")
plt.plot(lasso001.coef_,'^',label="lasso alpha=0.01")
plt.plot(lasso00001.coef_,'v',label="lasso alpha=0.0001")

plt.plot(ridge01.coef_,'o',label="Ridge alpha=0.1")
plt.legend(ncol=2,loc=(0,1.05))
plt.ylim(-25,25)
plt.xlabel("Coefficient index")
plt.ylabel("Coefficient magnitude")
